{"version":3,"sources":["utils/animations/animationOptions.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["animationOptions","animationData","autoplay","loop","rendererSettings","preserveAspectRatio","progressiveLoad","clearCanvas","App","svg","createAvatar","style","seed","width","height","radius","earrings","earringColor","earringsProbability","eyebrows","eyebrowColor","eyes","mouth","nose","shirt","shirtColor","hair","hairColor","className","options","strings","autoStart","dangerouslySetInnerHTML","__html","type","Background07","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAeeA,EAfU,SACrBC,EACAC,EACAC,GAHqB,MAInB,CACFA,OACAD,WACAD,gBACAG,iBAAkB,CACdC,oBAAqB,iBACrBC,iBAAiB,EACjBC,aAAa,K,eCgDNC,MAjDf,WACI,IAAMC,EAAMC,uBAAaC,EAAO,CAC5BC,KAAM,OACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,SAAU,CAAC,QACXC,aAAc,CAAC,SACfC,oBAAqB,IACrBC,SAAU,CAAC,MACXC,aAAc,CAAC,SACfC,KAAM,CAAC,WACPC,MAAO,CAAC,SACRC,KAAM,CAAC,SACPC,MAAO,CAAC,QACRC,WAAY,CAAC,SACbC,KAAM,CAAC,QACPC,UAAW,CAAC,WAGhB,OACI,qCACI,wBAAQC,UAAU,SAAlB,SACI,sBAAKA,UAAU,YAAf,UACI,cAAC,IAAD,CACIC,QAAS,CACLC,QAAS,CAAC,QAAS,SACnBC,WAAW,EACX5B,MAAM,KAGd,qBACIyB,UAAU,SACVI,wBAAyB,CAAEC,OAAQxB,KAEvC,wBAAQyB,KAAK,SAAb,uBAGR,wBAAQN,UAAU,SAAlB,SACI,8BACI,cAAC,IAAD,CACIC,QAAS7B,EAAiBmC,GAAc,GAAM,aCnCvDC,EAhBS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAEO,IADHC,EACE,EADFA,OAAQC,EACN,EADMA,OAAQC,EACd,EADcA,OAAQC,EACtB,EADsBA,OAAQC,EAC9B,EAD8BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.405b5a22.chunk.js","sourcesContent":["const animationOptions = (\n    animationData: object,\n    autoplay: boolean,\n    loop: boolean,\n) => ({\n    loop,\n    autoplay,\n    animationData,\n    rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice',\n        progressiveLoad: true,\n        clearCanvas: false,\n    },\n});\n\nexport default animationOptions;\n","import React from 'react';\nimport Typewriter from 'typewriter-effect';\nimport { createAvatar } from '@dicebear/avatars';\nimport * as style from '@dicebear/micah';\nimport Lottie from 'react-lottie';\n\n// animations\nimport animationOptions from './utils/animations/animationOptions';\nimport Background07 from './utils/animations/animationJson/background-07.json';\n\nfunction App() {\n    const svg = createAvatar(style, {\n        seed: 'seed',\n        width: 196,\n        height: 196,\n        radius: 0,\n        earrings: ['hoop'],\n        earringColor: ['black'],\n        earringsProbability: 100,\n        eyebrows: ['up'],\n        eyebrowColor: ['coast'],\n        eyes: ['smiling'],\n        mouth: ['smile'],\n        nose: ['curve'],\n        shirt: ['open'],\n        shirtColor: ['black'],\n        hair: ['full'],\n        hairColor: ['coast'],\n    });\n\n    return (\n        <>\n            <header className=\"header\">\n                <div className=\"container\">\n                    <Typewriter\n                        options={{\n                            strings: ['Hello', 'World'],\n                            autoStart: true,\n                            loop: true,\n                        }}\n                    />\n                    <div\n                        className=\"avatar\"\n                        dangerouslySetInnerHTML={{ __html: svg }}\n                    />\n                    <button type=\"button\">Test</button>\n                </div>\n            </header>\n            <footer className=\"footer\">\n                <div>\n                    <Lottie\n                        options={animationOptions(Background07, true, true)}\n                    />\n                </div>\n            </footer>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({\n                getCLS, getFID, getFCP, getLCP, getTTFB,\n            }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}